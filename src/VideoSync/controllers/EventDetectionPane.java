/*
 * ****************************************************************
 * File: 			EventDetectionPane.java
 * Date Created:  	June 26, 2013
 * Programmer:		Dale Reed
 *
 * Purpose:			To handle and control aspects related to
 * 					jumping the videos and graphics to the next or
 * 					previous event based on the device and channel
 * 					selection
 *
 * ****************************************************************
 */
package VideoSync.controllers;

import VideoSync.models.DataModelProxy;
import VideoSync.objects.DeviceInputMap;
import VideoSync.objects.EDeviceType;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

public class EventDetectionPane extends JPanel implements Observer, ActionListener
{
    private static final long serialVersionUID = 1L;

    /**
     * Used to notify the rest of the program of any changes that may occur.
     */
    private DataModelProxy dmp;

    /**
     * Used in selecting one of the available devices that have been detected.
     */
    private final JComboBox<String> comboDevice;

    /**
     * Used in selecting the appropriate channel based on the device selection.
     */
    private final JComboBox<String> comboChannel;

    /**
     * Used in selecting the event to jump to the start of the state change.
     */
    private final JRadioButton frontRadio;

    /**
     * Used in selecting the event to jump to the end of the state change.
     */
    private final JRadioButton backRadio;

    /**
     * Used in jumping to the next event based on start or end state change selector.
     */
    private final JButton jumpForward;

    /**
     * Used in jumping to the previous event based on start or end state change selector.
     */
    private final JButton jumpBackward;

    /**
     * Used to keep track of the device types associated with each comboDevice string.
     */
    private Vector<EDeviceType> deviceTypes = new Vector<>();

    /**
     * Construct the Event Detection Pane to be displayed in the Data Window.
     *
     * Note: This sets up all the user interface elements to be displayed in the Event Detection Pane.
     * Most of this code has been generated by Window Builder for Eclipse
     */
    public EventDetectionPane()
    {
        setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
        setSize(new Dimension(320, 128));
        setLayout(new BorderLayout(0, 0));
        GridBagConstraints gbc_panel = new GridBagConstraints();
        gbc_panel.fill = GridBagConstraints.BOTH;
        gbc_panel.gridx = 3;
        gbc_panel.gridy = 0;

        JLabel lblErrorDetection = new JLabel("Event Detection");
        add(lblErrorDetection, BorderLayout.NORTH);
        lblErrorDetection.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel panel_4 = new JPanel();
        add(panel_4, BorderLayout.SOUTH);

        JPanel panel_3 = new JPanel();
        add(panel_3, BorderLayout.CENTER);
        panel_3.setLayout(null);

        JLabel lblJumpTo = new JLabel("Jump to:");
        lblJumpTo.setBounds(54, 38, 61, 16);
        panel_3.add(lblJumpTo);

        frontRadio = new JRadioButton("Front");
        frontRadio.setEnabled(false);
        frontRadio.setBounds(113, 34, 65, 23);
        panel_3.add(frontRadio);
        frontRadio.addActionListener(this);

        backRadio = new JRadioButton("Back");
        backRadio.setEnabled(false);
        backRadio.setBounds(185, 34, 65, 23);
        panel_3.add(backRadio);
        backRadio.addActionListener(this);

        comboChannel = new JComboBox<>();
        comboChannel.setEnabled(false);
        comboChannel.setModel(new DefaultComboBoxModel<>(new String[]{"Channel"}));
        comboChannel.setBounds(146, 6, 167, 27);
        comboChannel.addActionListener(this);
        comboChannel.setMaximumRowCount(12);
        panel_3.add(comboChannel);

        jumpBackward = new JButton("<<");
        jumpBackward.setEnabled(false);
        jumpBackward.setBounds(59, 59, 90, 29);
        panel_3.add(jumpBackward);
        jumpBackward.addActionListener(this);

        jumpForward = new JButton(">>");
        jumpForward.setEnabled(false);
        jumpForward.setActionCommand(">>");
        jumpForward.setBounds(146, 59, 90, 29);
        panel_3.add(jumpForward);
        jumpForward.addActionListener(this);

        comboDevice = new JComboBox<>();
        comboDevice.setEnabled(false);
        comboDevice.setModel(new DefaultComboBoxModel<>(new String[]{"Device"}));
        comboDevice.setBounds(6, 6, 140, 27);
        comboDevice.addActionListener(this);
        panel_3.add(comboDevice);

        ButtonGroup bg = new ButtonGroup();
        bg.add(frontRadio);
        bg.add(backRadio);
    }

    /**
     * Enables all of the items that can be enabled.
     *
     * @param enable Boolean value representing whether to enable or disable items
     */
    public void enableAllItems(boolean enable)
    {
        comboDevice.setEnabled(enable);
        comboChannel.setEnabled(enable);
        frontRadio.setEnabled(enable);
        backRadio.setEnabled(enable);
        jumpBackward.setEnabled(enable);
        jumpForward.setEnabled(enable);
        frontRadio.setSelected(true);
        backRadio.setSelected(false);
    }

    /**
     * Resets the graph panel when the DataModel notifies the panel that major changes took place and everything needs to reset.
     */
    private void resetPanel()
    {
        this.comboDevice.setSelectedIndex(0);
        this.comboChannel.setSelectedIndex(0);
    }

    /**
     * Invoked when the Data Model sends out a notification that an event changed that requires the
     * observers to pay attention to the data coming in
     */
    public void update(Observable o, Object arg)
    {
        if(arg instanceof String[])
        {
            setComboBoxTextFromData(arg);
        }

        if(arg instanceof Map)
        {
            //Get a set of devices sorted by key.
            // FIXME: Make sure cast is safe
            Set<Map.Entry<EDeviceType, String>> devices = ((Map<EDeviceType, String>) arg).entrySet();

            //Loop through each device and store device type and display string separately.
            //Use an array instead of vector for deviceStrings to ensure that order does not change.
            int index = 0;
            String[] deviceStrings = new String[devices.size()];
            Vector<EDeviceType> deviceTypes = new Vector<>();
            for(Map.Entry<EDeviceType, String> device : devices)
            {
                deviceTypes.add(device.getKey());
                deviceStrings[index] = device.getValue();
                index++;
            }

            //Set device types and combo box strings.
            //The index of the combo box should correspond to the index of deviceTypes.
            this.deviceTypes = deviceTypes;
            setComboBoxTextFromData(deviceStrings);
        }

        // If the notification argument is a string, then either update the channel list depending on the
        // current combo box selection or have the panel reset its content to defaults.
        if(arg instanceof String)
        {
            if(comboDevice.getSelectedIndex() != 0)
            {
                // If the argument passed in arg is equal to 'Input', then we can update the comboChannel combo box with the device's channels.
                if(arg.equals("Input"))
                {
                    this.setComboBoxTextFromData(this.dmp.getInputMapForDevice(deviceTypes.elementAt(comboDevice.getSelectedIndex())));
                }

                // If the argument passed in arg is equal to 'Reset', then we will reset the panel.
                if(arg.equals("Reset"))
                {
                    resetPanel();
                }
            }
        }

        // Check to see if arg is an instance of the DataModelProxy
        if(arg instanceof DataModelProxy)
        {
            // If dmp is null, then we assign arg to dmp.
            if(dmp == null)
            {
                dmp = (DataModelProxy) arg;
            }

            // Check to see if we loaded data successfully into the DataModel
            // If there is data loaded in the data model, then we can enable all the UI elements.
            // Otherwise we disable everything until data is loaded.
            enableAllItems(dmp.dataLoaded());
        }
    }

    /**
     * Sets the appropriate combo box from data returned from the DataModelProxy
     *
     * @param data Data passed to the update method, triggered by an update from an observable
     */
    private void setComboBoxTextFromData(Object data)
    {
        // If the data passed is an instance of a Map, we can set the
        // combo devices data model from the object that was passed
        // Otherwise if its not a String array, we are instead setting the channel data
        if(data instanceof String[])
        {
            // Set the combo box data to the string array that was sent
            comboDevice.setModel(new DefaultComboBoxModel<>((String[]) data));
        }
        else if(data instanceof Vector)
        {
            // Ensure that the data passed is not null.
            int selectedIndex = comboChannel.getSelectedIndex();

            // Get the size of the vector array that was passed.
            // FIXME: Make sure cast is safe
            int dataSize = ((Vector<DeviceInputMap>) data).size();

            // Create a string array to the length of the data sent + 1
            // This allows us to place a default string at the first position
            String[] strings = new String[dataSize + 1];

            // Set the first element to our default string
            strings[0] = "Choose a Channel";

            // Create string a string array for each data element and place it in the string array
            for(int i = 1; i <= dataSize; i++)
            {
                // FIXME: Make sure cast is safe
                strings[i] = ((Vector<DeviceInputMap>) data).elementAt(i - 1).getChannelName();
            }

            // Set the combo box data to the string array we just generated
            comboChannel.setModel(new DefaultComboBoxModel<>(strings));

            if(selectedIndex != 0 && selectedIndex < strings.length)
            {
                comboChannel.setSelectedIndex(selectedIndex);
            }
        }
    }

    /**
     * Invoked when any of the combo boxes' values are changed, or the JButton's are clicked..
     */
    public void actionPerformed(ActionEvent arg0)
    {
        // Get the source object from arg0
        Object source = arg0.getSource();

        // If the source of the ActionEvent is the devices combo box, retrieve the list of
        // available channels for that device.
        if(source == comboDevice)
        {
            // Create a temporary combo box element from the ActionEvent source.
            // FIXME: Make sure cast is safe
            JComboBox<String> combo = (JComboBox<String>) source;

            // Get the device of the selected item from the combo box.
            EDeviceType device = deviceTypes.elementAt(combo.getSelectedIndex());

            // Set the combo box text from the information returned from the DataModelProxy
            setComboBoxTextFromData((combo.getSelectedIndex() == 0) ? null : this.dmp.getInputMapForDevice(device));
        }
        else if(source == comboChannel)
        {
            System.out.println("Changing Channel Selection");
        }
        else if(source == jumpForward)
        {
            int chip = this.dmp.getChannelChipNumberFromName(deviceTypes.elementAt(comboDevice.getSelectedIndex()), (String) this.comboChannel.getSelectedItem());
            int pin = this.dmp.getChannelPinNumberFromName(deviceTypes.elementAt(comboDevice.getSelectedIndex()), (String) this.comboChannel.getSelectedItem());
            if(frontRadio.isSelected())
            {
                this.dmp.jumpToEvent(deviceTypes.elementAt(comboDevice.getSelectedIndex()), 1, chip, pin, 1);
            }
            else if(backRadio.isSelected())
            {
                this.dmp.jumpToEvent(deviceTypes.elementAt(comboDevice.getSelectedIndex()), 1, chip, pin, 0);
            }
        }
        else if(source == jumpBackward)
        {
            int chip = this.dmp.getChannelChipNumberFromName(deviceTypes.elementAt(comboDevice.getSelectedIndex()), (String) this.comboChannel.getSelectedItem());
            int pin = this.dmp.getChannelPinNumberFromName(deviceTypes.elementAt(comboDevice.getSelectedIndex()), (String) this.comboChannel.getSelectedItem());
            if(frontRadio.isSelected())
            {
                this.dmp.jumpToEvent(deviceTypes.elementAt(comboDevice.getSelectedIndex()), 0, chip, pin, 1);
            }
            else if(backRadio.isSelected())
            {
                this.dmp.jumpToEvent(deviceTypes.elementAt(comboDevice.getSelectedIndex()), 0, chip, pin, 0);
            }
        }
    }
}
